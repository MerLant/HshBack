// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
	provider = "prisma-client-js"
}

datasource db {
	provider = "postgresql"
	url      = env("DATABASE_URL")
}

model User {
	id String @id @default(uuid())

	email     String  @unique
	firstName String? @map("first_name")
	lastName  String? @map("last_name")

	createdAt DateTime @default(now()) @map("created_at")
	updatedAt DateTime @updatedAt @map("updated_at")

	roleId    Int     @map("role_id")
	isBlocked Boolean @default(false) @map("is_blocked")

	Roles     Roles       @relation(fields: [roleId], references: [id])
	Providers Providers[]
	Token     Token[]
	Build     Build[]
	Groups    Groups[]

	@@map("users")
}

model Token {
	id String @id @default(uuid())

	token     String   @unique
	exp       DateTime
	userId    String
	userAgent String   @map("user_agent")

	user User @relation(fields: [userId], references: [id], onDelete: Cascade)

	@@map("tokens")
}

model Task {
	id Int @id @default(autoincrement()) @map("task_id")

	name        String
	description String?

	input  String[]
	output String[]

	runTimeout     Int @map("run_timeout")
	runMemoryLimit Int @map("run_memory_limit")

	compileTimeout     Int @map("compile_timeout")
	compileMemoryLimit Int @map("compile_memory_limit")

	themeId Int

	Themes Themes  @relation(fields: [themeId], references: [id], onDelete: Cascade)
	Build  Build[]

	@@map("tasks")
}

model Solution {
	id String @id @default(uuid()) @map("solution_id")

	buildId String
	input   String
	output  String
	code    String

	Build Build @relation(fields: [buildId], references: [id])

	@@map("solutions")
}

model Build {
	id        String   @id @default(uuid()) @map("build_id")
	userId    String   @map("user_id")
	taskId    Int      @map("task_id")
	userCode  String   @map("user_code")
	buildDate DateTime @map("build_date")
	Lang      String?

	user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
	task     Task       @relation(fields: [taskId], references: [id], onDelete: Cascade)
	Solution Solution[]

	@@map("builds")
}

model Courses {
	id Int @id @default(autoincrement()) @map("course_id")

	name        String
	description String?

	Themes Themes[]

	@@map("courses")
}

model Themes {
	id Int @id @default(autoincrement()) @map("theme_id")

	name        String
	description String?
	courseId    Int     @map("course_id")
	Course      Courses @relation(fields: [courseId], references: [id], onDelete: Cascade)

	Task Task[]

	@@map("themes")
}

model Roles {
	id Int @id @default(autoincrement()) @map("role_id")

	name String

	Users User[]

	@@map("roles")
}

model Providers {
	id Int @id @default(autoincrement()) @map("provider_id")

	userId          String
	providersTypeId Int

	User          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
	ProvidersType ProvidersType @relation(fields: [providersTypeId], references: [id], onDelete: Cascade)

	@@map("providers")
}

model ProvidersType {
	id        Int         @id @default(autoincrement()) @map("providerstype_id")
	name      String
	Providers Providers[]

	@@map("providers_type")
}

model UsersGroup {
	userId  String
	groupId Int

	@@id([userId, groupId])
	@@map("group_users")
}

model Groups {
	id    Int    @id @default(autoincrement()) @map("group_id")
	name  String
	admin String

	Users User @relation(fields: [admin], references: [id], onDelete: Cascade)

	@@map("group")
}

// enum Provider {
//     VK
//     YANDEX
// }
