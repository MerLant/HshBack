name: Build and Deploy NestJS App with pnpm

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]
    workflow_dispatch:

jobs:
    build:
        runs-on: ubuntu-latest

        steps:
            # 1. Checkout repository
            - name: Checkout repository
              uses: actions/checkout@v3

            # 2. Setup Node.js
            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '20'

            # 3. Install pnpm
            - name: Install pnpm
              run: corepack enable && corepack prepare pnpm@latest --activate

            # 4. Install dependencies and build application
            - name: Install Dependencies and Build Application
              run: |
                  pnpm install
                  pnpm prisma generate
                  pnpm build

            # 5. Archive build
            - name: Archive build
              run: |
                  mkdir release
                  pnpm prune --prod
                  cp -R dist package.json pnpm-lock.yaml node_modules release/
                  cd release
                  tar --exclude='./**/*.log' -czvf ../release.tar.gz .
              shell: bash

            # 6. Upload artifact
            - name: Upload artifact
              uses: actions/upload-artifact@v3
              with:
                  name: nestjs-app-release
                  path: release.tar.gz

    deploy:
        runs-on: ubuntu-latest
        needs: build

        steps:
            - name: Download Artifact
              uses: actions/download-artifact@v3
              with:
                  name: nestjs-app-release

            - name: Install jq
              run: sudo apt-get update && sudo apt-get install -y jq

            - name: Upload Artifact via Pterodactyl API
              env:
                  PANEL_URL: ${{ secrets.PTERO_PANEL_URL }}
                  API_KEY: ${{ secrets.PTERO_API_KEY }}
                  SERVER_ID: ${{ secrets.PTERO_SERVER_ID }}
              run: |
                  # Запрос URL для загрузки файла
                  upload_response=$(curl -s -X GET "$PANEL_URL/api/client/servers/$SERVER_ID/files/upload" \
                    -H "Authorization: Bearer $API_KEY" \
                    -H "Accept: application/json")

                  # Извлечение URL из ответа
                  upload_url=$(echo "$upload_response" | jq -r '.attributes.url')

                  if [ -z "$upload_url" ] || [ "$upload_url" == "null" ]; then
                    echo "Error: Не удалось получить URL для загрузки файла на сервер."
                    echo "Ответ сервера: $upload_response"
                    exit 1
                  fi

                  echo "URL для загрузки получен: $upload_url"

                  # Загрузка артефакта по предварительно подписанному URL
                  upload_status=$(curl -s -o /dev/null -w "%{http_code}" -X PUT "$upload_url" \
                    -H "Content-Type: application/octet-stream" \
                    --data-binary "@release.tar.gz")

                  if [ "$upload_status" -ne 200 ] && [ "$upload_status" -ne 204 ]; then
                    echo "Error: Не удалось загрузить артефакт на сервер. HTTP статус: $upload_status" >&2
                    exit 1
                  fi

                  echo "Артефакт успешно загружен на сервер."

            - name: Decompress Artifact on Server
              env:
                  PANEL_URL: ${{ secrets.PTERO_PANEL_URL }}
                  API_KEY: ${{ secrets.PTERO_API_KEY }}
                  SERVER_ID: ${{ secrets.PTERO_SERVER_ID }}
              run: |
                  # Распаковка артефакта на сервере
                  response=$(curl -s -w "\n%{http_code}" \
                    -L -X POST "$PANEL_URL/api/client/servers/$SERVER_ID/files/decompress" \
                    -H "Authorization: Bearer $API_KEY" \
                    -H "Content-Type: application/json" \
                    -H "Accept: application/json" \
                    -d '{"root": "/", "file": "release.tar.gz"}')

                  http_body=$(echo "$response" | sed '$d')
                  http_code=$(echo "$response" | tail -n1)

                  if [ "$http_code" -ne 204 ]; then
                    echo "Error: Не удалось распаковать артефакт на сервере. HTTP статус: $http_code" >&2
                    echo "Тело ответа: $http_body" >&2
                    exit 1
                  fi

                  echo "Артефакт успешно распакован на сервере."

            - name: Start Application on Server
              env:
                  PANEL_URL: ${{ secrets.PTERO_PANEL_URL }}
                  API_KEY: ${{ secrets.PTERO_API_KEY }}
                  SERVER_ID: ${{ secrets.PTERO_SERVER_ID }}
              run: |
                  # Запуск приложения на сервере
                  response=$(curl -s -o /dev/null -w "%{http_code}" \
                    -X POST "$PANEL_URL/api/client/servers/$SERVER_ID/command" \
                    -H "Authorization: Bearer $API_KEY" \
                    -H "Content-Type: application/json" \
                    -d '{"command": "pnpm prisma migrate deploy && pnpm start"}')

                  if [ "$response" -ne 204 ]; then
                    echo "Error: Не удалось запустить приложение на сервере. HTTP статус: $response" >&2
                    exit 1
                  fi

                  echo "Приложение успешно запущено на сервере."
