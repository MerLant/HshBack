name: Build and Package NestJS App with pnpm

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]
    workflow_dispatch:

jobs:
    build:
        runs-on: ubuntu-latest

        steps:
            # 1. Клонирование репозитория
            - name: Checkout repository
              uses: actions/checkout@v3

            # 2. Установка Node.js
            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '20'

            # 3. Установка pnpm
            - name: Install pnpm
              run: corepack enable && corepack prepare pnpm@latest --activate

            # 4. Установка зависимостей и сборка приложения
            - name: Install Dependencies and Build Application
              run: |
                  pnpm install
                  pnpm prisma generate
                  pnpm build

            # 5. Архивирование сборки
            - name: Archive build
              run: |
                  mkdir release
                  pnpm prune --prod && cp -R dist package.json pnpm-lock.yaml node_modules release/
                  cd release
                  tar --exclude='./**/*.log' -czvf ../release.tar.gz .
              shell: bash

            # 6. Загрузка артефакта
            - name: Upload artifact
              uses: actions/upload-artifact@v3
              with:
                  name: nestjs-app-release
                  path: release.tar.gz

    prepare:
        runs-on: ubuntu-latest
        needs: build
        steps:
            - name: Download Artifact
              uses: actions/download-artifact@v3
              with:
                  name: nestjs-app-release

            - name: Check for Existing Release on Server
              env:
                  PANEL_URL: ${{ secrets.PTERO_PANEL_URL }}
                  API_KEY: ${{ secrets.PTERO_API_KEY }}
                  SERVER_ID: ${{ secrets.PTERO_SERVER_ID }}
              run: |
                  # Проверка наличия старого релиза на сервере
                  response=$(curl -i -X GET "$PANEL_URL/api/client/servers/$SERVER_ID/files/contents?file=%2Frelease.tar.gz" \
                    -H "Authorization: Bearer $API_KEY" \
                    -H "Accept: application/json" 2>&1) && echo "$response"

                  if [ $(echo "$response" | grep -c 'HTTP/.* 200') -eq 0 ]; then
                    echo "No existing release found on server. Skipping deletion step." && exit 0
                  fi

            - name: Delete Old Release from Server
              env:
                  PANEL_URL: ${{ secrets.PTERO_PANEL_URL }}
                  API_KEY: ${{ secrets.PTERO_API_KEY }}
                  SERVER_ID: ${{ secrets.PTERO_SERVER_ID }}
              run: |
                  # Удаление старого архива с релизом
                  response=$(curl -i -X POST "$PANEL_URL/api/client/servers/$SERVER_ID/files/delete" \
                    -H "Authorization: Bearer $API_KEY" \
                    -H "Content-Type: application/json" \
                    -d '{"root": "/", "files": ["release.tar.gz"]}' 2>&1) && echo "$response"

                  if [ $(echo "$response" | grep -c 'HTTP/.* 20[0-9]') -eq 0 ]; then
                    echo "Error: Failed to delete old release archive. Full response: $response" >&2
                    # Проверка на редирект или проблему с методом
                    if [ $(echo "$response" | grep -c 'HTTP/.* 302') -gt 0 ]; then
                      echo "Error: Received a redirect (HTTP 302). Please verify the URL or authorization settings." >&2
                    elif [ $(echo "$response" | grep -c 'HTTP/.* 405') -gt 0 ]; then
                      echo "Error: Method Not Allowed (HTTP 405). Please verify if the correct HTTP method is being used." >&2
                    fi
                    exit 1
                  fi

    deploy:
        runs-on: ubuntu-latest
        needs: prepare
        steps:
            - name: Decompress Artifact on Server
              env:
                  PANEL_URL: ${{ secrets.PTERO_PANEL_URL }}
                  API_KEY: ${{ secrets.PTERO_API_KEY }}
                  SERVER_ID: ${{ secrets.PTERO_SERVER_ID }}
              run: |
                  # Распаковка артефакта на сервере через Pterodactyl API
                  response=$(curl -i -L -X POST "$PANEL_URL/api/client/servers/$SERVER_ID/files/decompress" \
                    -H "Authorization: Bearer $API_KEY" \
                    -H "Content-Type: application/json" \
                    -H "Accept: application/json" \
                    -d '{"root": "/", "file": "release.tar.gz"}' 2>&1) && echo "$response"

                  if [ $(echo "$response" | grep -c 'HTTP/.* 20[0-9]') -eq 0 ]; then
                    echo "Error: Failed to decompress artifact on server. Full response: $response" >&2
                    exit 1
                  fi

            - name: Start Application on Server
              env:
                  PANEL_URL: ${{ secrets.PTERO_PANEL_URL }}
                  API_KEY: ${{ secrets.PTERO_API_KEY }}
                  SERVER_ID: ${{ secrets.PTERO_SERVER_ID }}
              run: |
                  # Запуск приложения на сервере через Pterodactyl API
                  response=$(curl -i -X POST "$PANEL_URL/api/client/servers/$SERVER_ID/command" \
                    -H "Authorization: Bearer $API_KEY" \
                    -H "Content-Type: application/json" \
                    -d '{"command": "pnpm prisma migrate deploy && pnpm start"}' 2>&1) && echo "$response"

                  if [ $(echo "$response" | grep -c 'HTTP/.* 20[0-9]') -eq 0 ]; then
                    echo "Error: Failed to start application on server." >&2
                    exit 1
                  fi
