name: Build and Package NestJS App with pnpm

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]
    workflow_dispatch:

jobs:
    build:
        runs-on: ubuntu-latest

        steps:
            # 1. Клонирование репозитория
            - name: Checkout repository
              uses: actions/checkout@v3

            # 2. Установка Node.js
            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '20'

            # 3. Установка pnpm
            - name: Install pnpm
              run: corepack enable && corepack prepare pnpm@latest --activate

            # 4. Установка зависимостей и сборка приложения
            - name: Install Dependencies and Build Application
              run: |
                  pnpm install
                  pnpm prisma generate
                  pnpm build

            # 5. Архивирование сборки
            - name: Archive build
              run: |
                  mkdir release
                  pnpm prune --prod && cp -R dist package.json pnpm-lock.yaml node_modules release/
                  cd release
                  tar --exclude='./**/*.log' -czvf ../release.tar.gz .
              shell: bash

            # 6. Загрузка артефакта
            - name: Upload artifact
              uses: actions/upload-artifact@v3
              with:
                  name: nestjs-app-release
                  path: release.tar.gz

    deploy:
        runs-on: ubuntu-latest
        needs: build
        steps:
            - name: Download Artifact
              uses: actions/download-artifact@v3
              with:
                  name: nestjs-app-release

            - name: Deploy to Pterodactyl
              env:
                  PANEL_URL: ${{ secrets.PTERO_PANEL_URL }}
                  API_KEY: ${{ secrets.PTERO_API_KEY }}
                  SERVER_ID: ${{ secrets.PTERO_SERVER_ID }}
              run: |
                  # Загрузка артефакта на сервер через Pterodactyl API с логикой повторных попыток
                  n=0
                  until [ "$n" -ge 5 ]
                  do
                    response=$(curl -i -L -c cookies.txt -b cookies.txt -X POST "$PANEL_URL/api/client/servers/$SERVER_ID/files/write?file=%2Frelease.tar.gz" \
                      -H "Authorization: Bearer $API_KEY" \
                      -H "Content-Type: text/plain" \
                      --data-binary "@release.tar.gz" 2>&1) && echo "$response" && [ $(echo "$response" | grep -c 'HTTP/.* 20[0-9]') -gt 0 ] && break
                    n=$((n+1))
                    echo "Retrying to upload artifact to server... ($n/5). Possible network issue or server unresponsive. Last response: $response"
                    sleep 5
                  done

                  if [ "$n" -ge 5 ]; then
                    echo "Error: Failed to upload artifact to server after multiple attempts. Please check URL, authentication credentials, and server logs for more details." >&2
                    exit 1
                  fi

            - name: Decompress Artifact on Server
              env:
                  PANEL_URL: ${{ secrets.PTERO_PANEL_URL }}
                  API_KEY: ${{ secrets.PTERO_API_KEY }}
                  SERVER_ID: ${{ secrets.PTERO_SERVER_ID }}
              run: |
                  # Распаковка артефакта на сервере через Pterodactyl API
                  response=$(curl -i -L -X POST "$PANEL_URL/api/client/servers/$SERVER_ID/files/decompress" \
                    -H "Authorization: Bearer $API_KEY" \
                    -H "Content-Type: application/json" \
                    -d '{"root": "/", "file": "release.tar.gz"}' 2>&1) && echo "$response"

                  if [ $(echo "$response" | grep -c 'HTTP/.* 20[0-9]') -eq 0 ]; then
                    echo "Error: Failed to decompress artifact on server. Full response: $response" >&2
                    exit 1
                  fi

            - name: Start Application on Server
              env:
                  PANEL_URL: ${{ secrets.PTERO_PANEL_URL }}
                  API_KEY: ${{ secrets.PTERO_API_KEY }}
                  SERVER_ID: ${{ secrets.PTERO_SERVER_ID }}
              run: |
                  # Удаление старого архива с релизом
                  response=$(curl -i -X POST "$PANEL_URL/api/client/servers/$SERVER_ID/files/delete" \
                    -H "Authorization: Bearer $API_KEY" \
                    -H "Content-Type: application/json" \
                    -d '{"root": "/", "files": ["release.tar.gz"]}' 2>&1) && echo "$response"

                  if [ $(echo "$response" | grep -c 'HTTP/.* 20[0-9]') -eq 0 ]; then
                    echo "Error: Failed to delete old release archive." >&2
                    exit 1
                  fi

                  # Запуск приложения на сервере через Pterodactyl API
                  response=$(curl -i -X POST "$PANEL_URL/api/client/servers/$SERVER_ID/command" \
                    -H "Authorization: Bearer $API_KEY" \
                    -H "Content-Type: application/json" \
                    -d '{"command": "pnpm prisma migrate deploy && pnpm start"}' 2>&1) && echo "$response"

                  if [ $(echo "$response" | grep -c 'HTTP/.* 20[0-9]') -eq 0 ]; then
                    echo "Error: Failed to start application on server." >&2
                    exit 1
                  fi
